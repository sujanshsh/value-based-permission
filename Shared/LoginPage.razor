@page "/login"
@using System.Text.Json
@using System.Linq;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthStateProvider

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <EditForm Model="user" OnSubmit="OnLoginSubmit" name="login_form" id="login-form" class="form">
                <div class="form-group">
                    <InputText @bind-Value="user.username" class="form-control" type="text" name="username" placeholder="Username" />
                </div>
                <div class="form-group">
                    <InputText @bind-Value="user.password" class="form-control" type="text" name="password" placeholder="Password" />
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {

}

@code {

    private Models.User user = new Models.User();

    private Models.User[] users;

    private async void OnLoginSubmit()
    {
        Console.WriteLine("Logging In");
        users = await Http.GetFromJsonAsync<Models.User[]>("sample-data/admin-users.json");
        try {
            user = users.First<Models.User>(c => c.username == user.username && c.password == user.password);
        }
        catch(Exception) {
            return;
        }
        if (user != null) {
            Console.WriteLine("User Found! username = " + user.username);
            string userJSON = System.Text.Json.JsonSerializer.Serialize(user);
            CreateCookie("loginCookie", userJSON, 1/24);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
     }

    private async void CreateCookie(string name, string value, float days)
    {
        await JSRuntime.InvokeAsync<string>("blazor_methods.CreateCookie", name, value, days);
    }
}
