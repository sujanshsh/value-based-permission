@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationService AuthStateProvider
@using MudBlazor


<MudThemeProvider />
<MudDialogProvider 
    CloseButton="true"
/>
<MudSnackbarProvider />

<MudLayout>
@if(!NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("login")) {
    <AuthorizeView>
        <Authorized>
            <MudAppBar Elevation="0">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudAppBarSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="OnLogout" />
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="1" DrawerWidthLeft="350px">
                <MudDrawerHeader>
                    <MudText Typo="Typo.subtitle2">
                        <MudIconButton Icon="@Icons.Material.Filled.SupervisorAccount" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                        AccessControlAdmin
                    </MudText>
                </MudDrawerHeader>
                <NavMenu />
            </MudDrawer>
        </Authorized>
        <NotAuthorized> </NotAuthorized>
    </AuthorizeView>
}
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {

    private bool  _drawerOpen = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var authState = await authenticationStateTask;
        if (authState is not null) {
            var user = authState.User;
            
            if (user is null || user.Identity is null || !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
            }
        }
    }

    private async void OnLogout()
    {
        Console.WriteLine("Logging Out");
        CreateCookie("loginCookie", "{}", -1);
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("", true);
    }

    private async void CreateCookie(string name, string value, float days)
    {
        await JSRuntime.InvokeAsync<string>("blazor_methods.CreateCookie", name, value, days);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
