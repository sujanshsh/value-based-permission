@page "/role-permissions"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IDialogService DialogService



<MudPaper Width="100%" Style="margin: 10px;">
    <MudContainer>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h3">Role Permissions</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="Models.Role" Label="Select A Role" 
                         SearchFunc="@SearchRole" ToStringFunc="@(e=> e==null?null : $"{e.name} ({e.description})")" 
                         ValueChanged="loadPermissionsOfRole" /> 
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="Models.Permission" Label="Select A Permission" @bind-Value="selectedPermission" 
                         SearchFunc="@SearchPermission" ToStringFunc="@(e=> e==null?null : $"{e.name} ({e.description})")" /> 
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnAddPermissionToRole">Add Permission to the Role</MudButton>
            </MudItem>
            <MudItem xs="12">
            @if (permissions.Length > 0) {
                <MudTable Items="@permissions" Dense="@true" Hover="@true" Bordered="@true" Striped="@true" Filter="new Func<Models.PermissionsOfRole,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Permissions of Selected Role</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Suffix</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Value Type</MudTh>
                        <MudTh>Values</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.id</MudTd>
                        <MudTd DataLabel="Description">@context.name</MudTd>
                        <MudTd DataLabel="Description">@context.suffix</MudTd>
                        <MudTd DataLabel="Name">@context.description</MudTd>
                        <MudTd DataLabel="Name">@context.value_type_name</MudTd>
                        <MudTd DataLabel="Name">@context.values</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" Size="@Size.Small" OnClick="@((e) => OnDeleteRolePermission(context.role_permissions_id))" ></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            } else {
                <MudAlert Severity="Severity.Normal">@(loadingPermissions ? "Loading..." : "No Data")</MudAlert>
            }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    private Models.PermissionsOfRole[] permissions = new Models.PermissionsOfRole[0];

    public Models.Role selectedRole = null;

    public Models.Permission selectedPermission = null;

    private string searchString = "";
    private bool loadingPermissions = false;

    [Inject]
    private HttpClient httpClient { get; set; }

    private bool FilterFunc(Models.PermissionsOfRole element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.values.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task<IEnumerable<Models.Role>> SearchRole(string value)
    {
        return await httpClient.GetFromJsonAsync<List<Models.Role>>($"roles/like?name={value}");
    }

    private async Task<IEnumerable<Models.Permission>> SearchPermission(string value)
    {
        return await httpClient.GetFromJsonAsync<List<Models.Permission>>($"permissions/like?name={value}");
    }

    private async Task loadPermissionsOfRole(Models.Role role)
    {
        selectedRole = role;
        loadingPermissions = true;
        try
        {
            permissions = await httpClient.GetFromJsonAsync<Models.PermissionsOfRole[]>($"roles/{selectedRole.id}/permissions");
        }
        catch
        {
            loadingPermissions = false;
        }
        loadingPermissions = false;
    }

    private async Task OnAddPermissionToRole()
    {
        Models.RolePermission rolePermission = new Models.RolePermission();
        rolePermission.role_id = selectedRole.id;
        rolePermission.permission_id = selectedPermission.id;
        await httpClient.PostAsJsonAsync<Models.RolePermission>("role-permissions", rolePermission);
        await loadPermissionsOfRole(selectedRole);
    }
    private async Task OnDeleteRolePermission(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("DialogContent", "Are you sure you want to delete?");
        parameters.Add("CancelText", "No");
        parameters.Add("OkText", "Yes");
        var dialog = DialogService.Show<SimpleDialog>("Confirmation", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            if ((bool)result.Data == true) {
                await DeleteRolePermission(id);
            }            
        }
    }

    private async Task DeleteRolePermission(int id)
    {
        if (id > 0)
        {
            try
            {
                await httpClient.DeleteAsync("role-permissions/" + id);
            }
            catch
            {
                return;
            }
            await loadPermissionsOfRole(selectedRole);
        }
    }
}
