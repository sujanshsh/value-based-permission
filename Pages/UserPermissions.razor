@page "/user-permissions"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]


<MudPaper Width="100%" Style="margin: 10px;">
    <MudContainer>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h3">User Roles</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="Models.AppsUser" Label="Select A User" 
                         SearchFunc="@SearchUser" ToStringFunc="@(e=> e==null?null : $"{e.email} ({e.name})")" 
                         ValueChanged="loadPermissionsOfUser" /> 
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshPermissionsList">List Permissions of the User</MudButton>
            </MudItem>
            <MudItem xs="12">
            @if (permissions.Length > 0) {
                <MudTable Items="@permissions" Dense="@true" Hover="@true" Bordered="@true" Striped="@true" Filter="new Func<Models.PermissionsOfUser,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Permissions of Selected User</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Suffix</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Value Type</MudTh>
                        <MudTh>Values</MudTh>
                        <MudTh>Role Name</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.id</MudTd>
                        <MudTd DataLabel="Name">@context.name</MudTd>
                        <MudTd DataLabel="Suffix">@context.suffix</MudTd>
                        <MudTd DataLabel="Description">@context.description</MudTd>
                        <MudTd DataLabel="Value Type">@context.value_type_name</MudTd>
                        <MudTd DataLabel="Values">@context.values</MudTd>
                        <MudTd DataLabel="Role Name">@context.role_name</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            } else {
                <MudAlert Severity="Severity.Normal">@(loadingPermissions ? "Loading..." : "No Data")</MudAlert>
            }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    private Models.PermissionsOfUser[] permissions = new Models.PermissionsOfUser[0];
    public Models.AppsUser selectedUser = null;
    private string searchString = "";
    private bool loadingPermissions = false;

    [Inject]
    private HttpClient httpClient { get; set; }

    private bool FilterFunc(Models.PermissionsOfUser element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.suffix.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.role_name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task<IEnumerable<Models.AppsUser>> SearchUser(string value)
    {
        return await httpClient.GetFromJsonAsync<List<Models.AppsUser>>($"users/like?name={value}");
    }

    private async Task loadPermissionsOfUser(Models.AppsUser user)
    {
        selectedUser = user;
        loadingPermissions = true;
        try
        {
            permissions = await httpClient.GetFromJsonAsync<Models.PermissionsOfUser[]>($"users/{selectedUser.id}/permissions");
        }
        catch
        {
            loadingPermissions = false;
        }
        loadingPermissions = false;
    }

    private async Task RefreshPermissionsList()
    {
        loadingPermissions = true;
        try
        {
            permissions = await httpClient.GetFromJsonAsync<Models.PermissionsOfUser[]>($"users/{selectedUser.id}/permissions");
        }
        catch
        {
            loadingPermissions = false;
        }
        loadingPermissions = false;
    }

   
    

}