@page "/users"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IDialogService DialogService



<MudPaper Width="100%" Style="margin: 10px;">
    <MudDialog @bind-IsVisible="createDialogOpened">
        <TitleContent>Create a Application User</TitleContent>
        <DialogContent>
            <MudTextField T="string" Label="Email" @bind-Value="newAppsUser.email" Style="width: 300px;"/>
            <MudTextField T="string" Label="Name" @bind-Value="newAppsUser.name"/>
            <MudTextField T="string" Label="Password" @bind-Value="newAppsUser.password"/>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CancelCreateDialog">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="OnSubmitAppsUser">Create</MudButton>
        </DialogActions>
    </MudDialog>
    <MudDialog @bind-IsVisible="editDialogOpened">
        <TitleContent>Edit Application User</TitleContent>
        <DialogContent>
            <MudTextField T="string" Label="Email" @bind-Value="editAppsUser.email" Style="width: 300px;"/>
            <MudTextField T="string" Label="Name" @bind-Value="editAppsUser.name"/>
            <MudTextField T="string" Label="Password" @bind-Value="newAppsUser.password"/>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CancelEditDialog">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="OnSubmitEditAppsUser">Save</MudButton>
        </DialogActions>
    </MudDialog>
    <MudContainer>
        <MudGrid>
            <MudItem xs="4">
                <MudText Typo="Typo.h3">Application Users</MudText>
            </MudItem>
            <MudItem xs="3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnCreatePermission">Create Application User</MudButton>
            </MudItem>
            <MudItem xs="12">
            @if (permissions.Length > 0) {
                <MudTable Items="@permissions" Dense="@true" Hover="@true" Bordered="@true" Striped="@true" Filter="new Func<Models.AppsUser,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Application Users</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.id</MudTd>
                        <MudTd DataLabel="Description">@context.email</MudTd>
                        <MudTd DataLabel="Name">@context.name</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="@Size.Small" OnClick="@((e) => OnEditAppsUser(context.id))" > </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" Size="@Size.Small" OnClick="@((e) => OnDeleteAppsUser(context.id))" ></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            } else {
                <MudAlert Severity="Severity.Normal">@(loadingAppsUser ? "Loading..." : "No Data")</MudAlert>
            }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    private Models.AppsUser[] permissions = new Models.AppsUser[0];

    public Models.AppsUser newAppsUser = new Models.AppsUser();
    public Models.AppsUser editAppsUser = new Models.AppsUser();

    private bool loadingAppsUser = false;
    private string searchString = "";

    [Inject]
    private HttpClient httpClient { get; set; }

    private bool createDialogOpened = false;
    private bool editDialogOpened = false;
    private bool FilterFunc(Models.AppsUser element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async Task loadValueTypes()
    {
        loadingAppsUser = true;
        try
        {
            permissions = await httpClient.GetFromJsonAsync<Models.AppsUser[]>("users");
        }
        catch
        {
            loadingAppsUser = false;
        }
        loadingAppsUser = false;
    }
    protected override async Task OnInitializedAsync()
    {
        await loadValueTypes();
    }

    private void CancelCreateDialog() => createDialogOpened = false;
    private void CancelEditDialog() => editDialogOpened = false;

    private void OnCreatePermission()
    {
        createDialogOpened = true;
    }

    private void OnEditAppsUser(int id)
    {
        var selectedValueType = Array.FindAll<Models.AppsUser>(permissions, r => r.id == id).FirstOrDefault();
        editAppsUser.id = selectedValueType.id;
        editAppsUser.name = selectedValueType.name;
        editAppsUser.email = selectedValueType.email;
        editAppsUser.password = selectedValueType.password;
        editDialogOpened = true;
    }

    private async Task OnSubmitAppsUser()
    {
        if (newAppsUser.name != "" && newAppsUser.email != "")
        {
            try
            {
                await httpClient.PostAsJsonAsync<Models.AppsUser>("users", newAppsUser);
            }
            catch
            {
                return;
            }
            await loadValueTypes();
        }
        createDialogOpened = false;
    }

    private async Task OnSubmitEditAppsUser()
    {
        if (editAppsUser.name != "" && editAppsUser.email != "")
        {
            try
            {
                await httpClient.PutAsJsonAsync<Models.AppsUser>("users/" + editAppsUser.id, editAppsUser);
            }
            catch
            {
                return;
            }
            await loadValueTypes();
        }
        editDialogOpened = false;
    }


    private async Task OnDeleteAppsUser(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("DialogContent", "Are you sure you want to delete?");
        parameters.Add("CancelText", "No");
        parameters.Add("OkText", "Yes");
        var dialog = DialogService.Show<SimpleDialog>("Confirmation", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            if ((bool)result.Data == true) {
                await DeleteAppsUser(id);
            }            
        }
    }

    private async Task DeleteAppsUser(int id)
    {
        if (id > 0)
        {
            try
            {
                await httpClient.DeleteAsync("users/" + id);
            }
            catch
            {
                return;
            }
            await loadValueTypes();
        }
    }
}
