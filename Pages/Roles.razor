@page "/roles"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IDialogService DialogService



<MudPaper Width="100%" Style="margin: 10px;">
    <MudDialog @bind-IsVisible="createDialogOpened">
        <TitleContent>Create A Role</TitleContent>
        <DialogContent>
            <MudTextField T="string" Label="Name" @bind-Value="newRole.name"/>
            <MudTextField T="string" Label="Description" @bind-Value="newRole.description" Style="width: 300px;"/>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CancelCreateDialog">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="OnSubmitRole">Create</MudButton>
        </DialogActions>
    </MudDialog>
    <MudDialog @bind-IsVisible="editDialogOpened">
        <TitleContent>Edit Role</TitleContent>
        <DialogContent>
            <MudTextField T="string" Label="Name" @bind-Value="editRole.name"/>
            <MudTextField T="string" Label="Description" @bind-Value="editRole.description" Style="width: 300px;"/>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CancelEditDialog">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="OnSubmitEditRole">Save</MudButton>
        </DialogActions>
    </MudDialog>
    <MudContainer>
        <MudGrid>
            <MudItem xs="3">
                <MudText Typo="Typo.h3">Roles</MudText>
            </MudItem>
            <MudItem xs="3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnCreateRole">Create Role</MudButton>
            </MudItem>
            <MudItem xs="12">
            @if (roles.Length > 0) {
                <MudTable Items="@roles" Dense="@true" Hover="@true" Bordered="@true" Striped="@true" Filter="new Func<Models.Role,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Periodic Elements</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.id</MudTd>
                        <MudTd DataLabel="Name">@context.name</MudTd>
                        <MudTd DataLabel="Description">@context.description</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="@Size.Small" OnClick="@((e) => OnEditRole(context.id))" > </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" Size="@Size.Small" OnClick="@((e) => OnDeleteRole(context.id))" ></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            } else {
                <MudAlert Severity="Severity.Normal">@(loadingRoles ? "Loading..." : "No Data")</MudAlert>
            }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    private Models.Role[] roles = new Models.Role[0];

    public Models.Role newRole = new Models.Role();
    public Models.Role editRole = new Models.Role();

    private bool loadingRoles = false;
    private string searchString = "";

    [Inject]
    private HttpClient httpClient { get; set; }

    private bool createDialogOpened = false;
    private bool editDialogOpened = false;

    private bool FilterFunc(Models.Role element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async Task loadRoles()
    {
        loadingRoles = true;
        try
        {
            roles = await httpClient.GetFromJsonAsync<Models.Role[]>("roles");
        }
        catch
        {
            loadingRoles = false;
        }
        loadingRoles = false;
    }
    protected override async Task OnInitializedAsync()
    {
        await loadRoles();
    }

    private void CancelCreateDialog() => createDialogOpened = false;
    private void CancelEditDialog() => editDialogOpened = false;

    private void OnCreateRole()
    {
        createDialogOpened = true;
    }

    private void OnEditRole(int id)
    {
        var roleToEdit = Array.FindAll<Models.Role>(roles, r => r.id == id).FirstOrDefault();
        editRole.id = roleToEdit.id;
        editRole.name = roleToEdit.name;
        editRole.description = roleToEdit.description;
        editDialogOpened = true;
    }

    private async Task OnSubmitRole()
    {
        if (newRole.name != "" && newRole.description != "")
        {
            try
            {
                await httpClient.PostAsJsonAsync<Models.Role>("roles", newRole);
            }
            catch
            {
                return;
            }
            await loadRoles();
        }
        createDialogOpened = false;
    }

    private async Task OnSubmitEditRole()
    {
        if (editRole.name != "" && editRole.description != "")
        {
            try
            {
                await httpClient.PutAsJsonAsync<Models.Role>("roles/" + editRole.id, editRole);
            }
            catch
            {
                return;
            }
            await loadRoles();
        }
        editDialogOpened = false;
    }


    private async Task OnDeleteRole(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("DialogContent", "Are you sure you want to delete?");
        parameters.Add("CancelText", "No");
        parameters.Add("OkText", "Yes");
        var dialog = DialogService.Show<SimpleDialog>("Confirmation", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            if ((bool)result.Data == true) {
                await DeleteRole(id);
            }            
        }
    }

    private async Task DeleteRole(int id)
    {
        if (id > 0)
        {
            try
            {
                await httpClient.DeleteAsync("roles/" + id);
            }
            catch
            {
                return;
            }
            await loadRoles();
        }
    }
}
